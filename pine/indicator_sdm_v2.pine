//@version=6
indicator("VMSI-SDM v2 (Volde Momentum Stage Indicator)", overlay=true, max_boxes_count=500, max_labels_count=500)

// ═══════════════════════════════════════════════════════════
// 📌 VMSI-SDM - 자가학습형 Stage Detection Model
// TradingView Webhook → FastAPI → Optuna → Streamlit
// ═══════════════════════════════════════════════════════════

// @preset v2025-10-29
// 프리셋은 learner가 생성한 JSON을 여기에 복사-붙여넣기

// ─────────────── 파라미터 (Preset 주입 포인트) ───────────────
var g_params = "파라미터 설정"
ema1_len = input.int(20, "EMA1 Length", group=g_params)
ema2_len = input.int(50, "EMA2 Length", group=g_params)
rsi_len = input.int(14, "RSI Length", group=g_params)
vcp_len = input.int(20, "VCP Length", group=g_params)

rsi_buy_th = input.float(55, "RSI Buy Threshold", group=g_params)
rsi_sell_th = input.float(45, "RSI Sell Threshold", group=g_params)
vol_mult_buy = input.float(1.5, "Volume Mult Buy", group=g_params)
vol_mult_sell = input.float(1.3, "Volume Mult Sell", group=g_params)

alpha = input.float(0.8, "Alpha (TrendScore weight)", step=0.05, group=g_params)
beta = input.float(0.35, "Beta (RSI weight)", step=0.05, group=g_params)
gamma = input.float(0.7, "Gamma (VolMult weight)", step=0.05, group=g_params)
delta = input.float(0.6, "Delta (VCP weight)", step=0.05, group=g_params)
epsilon = input.float(0.8, "Epsilon (Macro weight)", step=0.05, group=g_params)

hysteresis_len = input.int(5, "Hysteresis Length (avg)", group=g_params)
cooldown_bars = input.int(10, "Cooldown Bars", group=g_params)

// 매크로 가중치
vix_w = input.float(-0.3, "VIX Weight", step=0.1, group=g_params)
dxy_w = input.float(-0.2, "DXY Weight", step=0.1, group=g_params)
us10y_w = input.float(-0.2, "US10Y Weight", step=0.1, group=g_params)
hygief_w = input.float(0.4, "HYG/IEF Weight", step=0.1, group=g_params)

// 빠른 모드 (Codex v1 스타일 - 저지연)
var g_mode = "모드 설정"
fast_mode = input.bool(false, "Fast Mode (No Hysteresis/Cooldown)", tooltip="활성화 시 히스테리시스와 쿨다운을 생략하여 신호 발생 속도 향상", group=g_mode)

// 매크로 데이터 실시간 연동
use_realtime_macro = input.bool(false, "Use Real-time Macro Data", tooltip="활성화 시 VIX, DXY 등을 실시간으로 가져옴 (느릴 수 있음)", group=g_mode)

// 매크로 심볼 설정
var g_macro = "매크로 심볼"
vix_symbol = input.symbol("CBOE:VIX", "VIX Symbol", group=g_macro, tooltip="대안: TVC:VIX, FRED:VIXCLS")
dxy_symbol = input.symbol("TVC:DXY", "DXY Symbol", group=g_macro, tooltip="대안: CURRENCYCOM:US_DOLLAR_INDEX")
us10y_symbol = input.symbol("TVC:US10Y", "US10Y Symbol", group=g_macro, tooltip="대안: FRED:DGS10")
hyg_symbol = input.symbol("AMEX:HYG", "HYG Symbol (High Yield Bond ETF)", group=g_macro)
ief_symbol = input.symbol("NASDAQ:IEF", "IEF Symbol (Treasury Bond ETF)", group=g_macro)

// 테이블 설정
var g_table = "테이블 설정"
table_position = input.string("Top Right", "Panel Position", options=["Top Right", "Top Left", "Bottom Right", "Bottom Left"], group=g_table)
table_size = input.string("Normal", "Panel Size", options=["Large", "Normal", "Small"], group=g_table)

// Webhook 설정
webhook_url = input.string("", "Webhook URL", group="Webhook")
enable_webhook = input.bool(true, "Enable Webhook", group="Webhook")

// ─────────────── 지표 계산 ───────────────
ema1 = ta.ema(close, ema1_len)
ema2 = ta.ema(close, ema2_len)
rsi = ta.rsi(close, rsi_len)

// Volume 안전 처리 (Volume 없는 심볼 대응)
vol_avg = ta.sma(volume, 20)
vol_mult = nz(vol_avg > 0 ? volume / vol_avg : 1.0, 1.0)

// VCP (Volatility Contraction Pattern) - 최근 N봉 고가/저가 범위
vcp_high = ta.highest(high, vcp_len)
vcp_low = ta.lowest(low, vcp_len)
vcp_ratio = nz(vcp_high > vcp_low ? (vcp_high - vcp_low) / vcp_high : 0.5, 0.5)

// ATH 거리 (안전 처리)
ath = ta.highest(high, 252)
dist_ath = nz(ath > 0 ? (ath - close) / ath : 0.0, 0.0)

// ─────────────── 매크로 지표 (실시간 or 시뮬레이션) ───────────────
// 실시간 데이터 가져오기 (use_realtime_macro=false일 때는 security() 호출 스킵)
vix_real = use_realtime_macro ? request.security(vix_symbol, timeframe.period, close) : na
dxy_real = use_realtime_macro ? request.security(dxy_symbol, timeframe.period, close) : na
us10y_real = use_realtime_macro ? request.security(us10y_symbol, timeframe.period, close) : na
hyg_real = use_realtime_macro ? request.security(hyg_symbol, timeframe.period, close) : na
ief_real = use_realtime_macro ? request.security(ief_symbol, timeframe.period, close) : na

// Fallback to simulation (실시간 데이터 실패 시 시뮬레이션 값 사용)
vix_val = nz(vix_real, 18.4)
dxy_val = nz(dxy_real, 104.5)
us10y_val = nz(us10y_real, 4.5)
hyg_close = nz(hyg_real, 79.0)
ief_close = nz(ief_real, 95.0)
hygief_ratio = nz(ief_close > 0 ? hyg_close / ief_close : 0.83, 0.83)

// 트렌드 변환 (간단화)
dxy_trend_val = use_realtime_macro ? (ta.ema(dxy_val, 10) > ta.ema(dxy_val, 30) ? 1.0 : -1.0) : -1.0
us10y_trend_val = use_realtime_macro ? (ta.ema(us10y_val, 10) > ta.ema(us10y_val, 30) ? 1.0 : -1.0) : 0.0
hygief_val = use_realtime_macro ? (hygief_ratio > ta.ema(hygief_ratio, 20) ? 1.0 : -1.0) : 1.0

// Macro Score 계산
macro_score = vix_w * (vix_val / 20.0) + dxy_w * dxy_trend_val + us10y_w * us10y_trend_val + hygief_w * hygief_val

// ─────────────── TrendScore 계산 ───────────────
ema_above = ema1 > ema2 ? 1.0 : 0.0
rsi_norm = rsi / 100.0
vol_norm = math.min(vol_mult / 3.0, 1.0)
vcp_norm = 1.0 - vcp_ratio
// 참고: ath_norm 제거 (계산만 하고 사용하지 않아 혼란 야기)
// dist_ath는 유지 (alert JSON에서 사용)

trend_score = (alpha * ema_above + beta * rsi_norm + gamma * vol_norm + delta * vcp_norm) * 100.0
trend_score := math.max(0, math.min(100, trend_score))

// Probability (Macro 반영)
prob_raw = (trend_score / 100.0 + epsilon * macro_score) / (1.0 + epsilon)
prob = math.max(0.0, math.min(1.0, prob_raw))

// ─────────────── Hysteresis (3봉 평균) - 빠른 모드에서는 생략 ───────────────
trend_score_smooth = fast_mode ? trend_score : ta.sma(trend_score, hysteresis_len)
prob_smooth = fast_mode ? prob : ta.sma(prob, hysteresis_len)

// ─────────────── Stage 판단 ───────────────
var string stage = "WATCH"
var int last_signal_bar = 0
var string last_signal = ""

// Cooldown 체크 - 빠른 모드에서는 생략
bars_since_signal = bar_index - last_signal_bar
cooldown_passed = fast_mode ? true : (bars_since_signal >= cooldown_bars)

// Stage 로직 (원래 설계: Stage Detection - 중장기 추세 전환 감지)
if barstate.isconfirmed
    if cooldown_passed
        // BUY: 강력한 상승 추세 진입 (보수적)
        if trend_score_smooth >= 75 and prob_smooth >= 0.65 and rsi > rsi_buy_th and vol_mult > vol_mult_buy
            stage := "BUY"
            last_signal := "BUY"
            last_signal_bar := bar_index
        // SELL: 강력한 하락 추세 진입 (보수적)
        else if trend_score_smooth <= 25 and prob_smooth <= 0.35 and rsi < rsi_sell_th and vol_mult > vol_mult_sell
            stage := "SELL"
            last_signal := "SELL"
            last_signal_bar := bar_index
        // WATCH_UP: 상승 관찰 (아직 매수 아님)
        else if trend_score_smooth > 55 and prob_smooth > 0.55
            stage := "WATCH_UP"
        // WATCH_DOWN: 하락 관찰 (아직 매도 아님)
        else if trend_score_smooth < 45 and prob_smooth < 0.45
            stage := "WATCH_DOWN"

// ─────────────── 시각화 ───────────────
// 배경색: BUY/SELL만 표시 (WATCH는 배경 없음으로 가독성 향상)
bgcolor_col = stage == "BUY" ? color.new(color.green, 85) : stage == "SELL" ? color.new(color.red, 85) : na
bgcolor(bgcolor_col)

// EMA 라인
plot(ema1, "EMA20", color=color.blue, linewidth=1)
plot(ema2, "EMA50", color=color.orange, linewidth=2)

// BUY 신호 (초록색 라벨)
show_buy = barstate.isconfirmed and last_signal == "BUY" and bar_index == last_signal_bar
plotshape(show_buy, title="BUY Signal", text="BUY", location=location.belowbar, color=color.new(color.green, 0), style=shape.labelup, textcolor=color.white, size=size.normal)

// SELL 신호 (빨간색 라벨)
show_sell = barstate.isconfirmed and last_signal == "SELL" and bar_index == last_signal_bar
plotshape(show_sell, title="SELL Signal", text="SELL", location=location.abovebar, color=color.new(color.red, 0), style=shape.labeldown, textcolor=color.white, size=size.normal)

// ─────────────── 패널 표시 (위치/크기 선택 가능) ───────────────
// 위치 결정 (한 줄로 작성)
panel_pos = table_position == "Top Right" ? position.top_right : table_position == "Top Left" ? position.top_left : table_position == "Bottom Right" ? position.bottom_right : position.bottom_left

// 크기 결정
text_size_label = table_size == "Large" ? size.large : table_size == "Small" ? size.small : size.normal
text_size_value = table_size == "Large" ? size.normal : table_size == "Small" ? size.tiny : size.small
text_size_stage = table_size == "Large" ? size.huge : table_size == "Small" ? size.normal : size.large

var table panel = table.new(panel_pos, 2, 9, border_width=2)
if barstate.islast
    // 모드 표시
    mode_text = fast_mode ? "FAST" : "NORMAL"
    mode_color = fast_mode ? color.new(color.yellow, 0) : color.new(color.blue, 0)
    table.cell(panel, 0, 0, "Mode", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 0, mode_text, bgcolor=mode_color, text_color=color.white, text_size=text_size_value)
    
    // Stage (배경색 항상 표시)
    stage_bg = stage == "BUY" ? color.new(color.green, 20) : stage == "SELL" ? color.new(color.red, 20) : stage == "WATCH_UP" ? color.new(color.blue, 20) : color.new(color.orange, 20)
    table.cell(panel, 0, 1, "Stage", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 1, stage, bgcolor=stage_bg, text_color=color.white, text_size=text_size_stage)
    
    // TScore
    table.cell(panel, 0, 2, "TScore", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 2, str.tostring(trend_score_smooth, "#.0"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // Prob
    table.cell(panel, 0, 3, "Prob", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 3, str.tostring(prob_smooth, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // RSI
    table.cell(panel, 0, 4, "RSI", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 4, str.tostring(rsi, "#.0"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // VolMult
    table.cell(panel, 0, 5, "VolMult", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 5, str.tostring(vol_mult, "#.#"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // VCP
    table.cell(panel, 0, 6, "VCP", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 6, str.tostring(vcp_ratio, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // DistATH
    table.cell(panel, 0, 7, "DistATH", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 7, str.tostring(dist_ath, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    // Macro
    macro_text = use_realtime_macro ? "LIVE" : "SIM"
    macro_color = use_realtime_macro ? color.new(color.green, 20) : color.new(color.gray, 20)
    table.cell(panel, 0, 8, "Macro", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 8, macro_text, bgcolor=macro_color, text_color=color.white, text_size=text_size_value)

// ─────────────── Webhook Alert (표준화된 JSON Schema) ───────────────
// 참고: webhook_url 입력은 TradingView Alert 설정 UI에서만 사용됨 (코드에서는 사용 안 함)
if barstate.isconfirmed and enable_webhook and (last_signal == "BUY" or last_signal == "SELL") and bar_index == last_signal_bar
    // Alert JSON - 표준화된 스키마 (snake_case, 필수 필드)
    json_p1 = '{"ts_unix":' + str.tostring(time, "#") + ',"symbol":"' + syminfo.ticker + '","timeframe":"' + timeframe.period + '"'
    json_p2 = ',"action":"' + last_signal + '","price":' + str.tostring(close, "#.##")
    json_p3 = ',"trend_score":' + str.tostring(trend_score_smooth, "#.##") + ',"prob":' + str.tostring(prob_smooth, "#.####")
    json_p4 = ',"rsi":' + str.tostring(rsi, "#.##") + ',"vol_mult":' + str.tostring(vol_mult, "#.##")
    json_p5 = ',"vcp_ratio":' + str.tostring(vcp_ratio, "#.####") + ',"dist_ath":' + str.tostring(dist_ath, "#.####")
    json_p6 = ',"ema1":' + str.tostring(ema1, "#.##") + ',"ema2":' + str.tostring(ema2, "#.##")
    json_p7 = ',"bar_state":"close","fast_mode":' + str.tostring(fast_mode) + ',"realtime_macro":' + str.tostring(use_realtime_macro)
    json_p8 = ',"version":"vmsi_sdm_v2.1"}'
    
    alert_msg = json_p1 + json_p2 + json_p3 + json_p4 + json_p5 + json_p6 + json_p7 + json_p8
    
    // 확정봉 종료 시 한 번만 알림
    alert(alert_msg, alert.freq_once_per_bar_close)
