//@version=6
indicator("VMSI-SDM v2.1", overlay=true, max_boxes_count=500, max_labels_count=500)

// 프리셋 선택
var g_preset = "프리셋"
preset_type = input.string("Custom", "프리셋", options=["Custom", "Equity Swing", "Crypto Intraday", "Forex Scalping", "Index Position"], group=g_preset)

get_preset_values() =>
    if preset_type == "Equity Swing"
        [20, 50, 14, 20, 0.8, 7, 10]
    else if preset_type == "Crypto Intraday"
        [12, 26, 10, 14, 0.5, 3, 5]
    else if preset_type == "Forex Scalping"
        [9, 21, 7, 10, 0.3, 1, 2]
    else if preset_type == "Index Position"
        [30, 100, 21, 30, 1.0, 10, 15]
    else
        [20, 50, 14, 20, 0.8, 5, 10]

[preset_ema1, preset_ema2, preset_rsi, preset_vcp, preset_eps, preset_hyst, preset_cool] = get_preset_values()

var g_params = "파라미터"
ema1_len = input.int(20, "EMA1", group=g_params)
ema2_len = input.int(50, "EMA2", group=g_params)
rsi_len = input.int(14, "RSI", group=g_params)
vcp_len = input.int(20, "VCP", group=g_params)
rsi_buy_th = input.float(55, "RSI 매수선", group=g_params)
rsi_sell_th = input.float(45, "RSI 매도선", group=g_params)
vol_mult_buy = input.float(1.5, "거래량배수 매수", group=g_params)
vol_mult_sell = input.float(1.3, "거래량배수 매도", group=g_params)

alpha = input.float(0.8, "Alpha", step=0.05, group=g_params)
beta = input.float(0.35, "Beta", step=0.05, group=g_params)
gamma = input.float(0.7, "Gamma", step=0.05, group=g_params)
delta = input.float(0.6, "Delta", step=0.05, group=g_params)
epsilon = input.float(0.8, "Epsilon", step=0.05, group=g_params)
hysteresis_len = input.int(5, "히스테리시스", group=g_params)
cooldown_bars = input.int(10, "쿨다운", group=g_params)

vix_w = input.float(-0.3, "VIX 가중치", step=0.1, group=g_params)
dxy_w = input.float(-0.2, "DXY 가중치", step=0.1, group=g_params)
us10y_w = input.float(-0.2, "US10Y 가중치", step=0.1, group=g_params)
hygief_w = input.float(0.4, "HYG/IEF 가중치", step=0.1, group=g_params)

ema1_len_final = preset_type == "Custom" ? ema1_len : preset_ema1
ema2_len_final = preset_type == "Custom" ? ema2_len : preset_ema2
rsi_len_final = preset_type == "Custom" ? rsi_len : preset_rsi
vcp_len_final = preset_type == "Custom" ? vcp_len : preset_vcp
epsilon_final = preset_type == "Custom" ? epsilon : preset_eps
hysteresis_len_final = preset_type == "Custom" ? hysteresis_len : preset_hyst
cooldown_bars_final = preset_type == "Custom" ? cooldown_bars : preset_cool

var g_mode = "모드"
fast_mode = input.bool(false, "Fast Mode", group=g_mode)
use_realtime_macro = input.bool(false, "실시간 매크로", group=g_mode)

var g_macro = "매크로 심볼"
vix_symbol = input.symbol("CBOE:VIX", "VIX", group=g_macro)
dxy_symbol = input.symbol("TVC:DXY", "DXY", group=g_macro)
us10y_symbol = input.symbol("TVC:US10Y", "US10Y", group=g_macro)
hyg_symbol = input.symbol("AMEX:HYG", "HYG", group=g_macro)
ief_symbol = input.symbol("NASDAQ:IEF", "IEF", group=g_macro)

var g_sltp = "손익 표시"
show_sltp = input.bool(true, "SL/TP 라인 표시", group=g_sltp)
sl_pct = input.float(5.0, "손절 %", step=0.5, group=g_sltp)
tp_pct = input.float(10.0, "익절 %", step=0.5, group=g_sltp)

var g_table = "패널"
table_position = input.string("Top Right", "위치", options=["Top Right", "Top Left", "Bottom Right", "Bottom Left"], group=g_table)
table_size = input.string("Normal", "크기", options=["Large", "Normal", "Small"], group=g_table)

webhook_url = input.string("", "Webhook URL", group="Webhook")
enable_webhook = input.bool(true, "Webhook 활성화", group="Webhook")

clamp(x, lo, hi) => math.max(lo, math.min(hi, x))
safe_div(a, b, fallback) => nz(b > 0 ? a / b : fallback, fallback)

ema1 = ta.ema(close, ema1_len_final)
ema2 = ta.ema(close, ema2_len_final)
rsi = ta.rsi(close, rsi_len_final)
vol_avg = ta.sma(volume, 20)
vol_mult = safe_div(volume, vol_avg, 1.0)
vcp_high = ta.highest(high, vcp_len_final)
vcp_low = ta.lowest(low, vcp_len_final)
vcp_ratio = safe_div(vcp_high - vcp_low, vcp_high, 0.5)
ath = ta.highest(high, 252)
dist_ath = safe_div(ath - close, ath, 0.0)
atr_val = ta.atr(14)

calc_proxy_macro_signal() =>
    atr_baseline = ta.sma(atr_val, 100)
    volatility_ratio = safe_div(atr_val, atr_baseline, 1.0)
    if volatility_ratio > 1.2
        -1.0
    else if volatility_ratio < 0.8
        +1.0
    else
        0.0

fetch_macro_live() =>
    vix = request.security(vix_symbol, timeframe.period, close)
    dxy = request.security(dxy_symbol, timeframe.period, close)
    us10y = request.security(us10y_symbol, timeframe.period, close)
    hyg = request.security(hyg_symbol, timeframe.period, close)
    ief = request.security(ief_symbol, timeframe.period, close)
    vix_val = nz(vix, 18.4)
    dxy_val = nz(dxy, 104.5)
    us10y_val = nz(us10y, 4.5)
    hyg_close = nz(hyg, 79.0)
    ief_close = nz(ief, 95.0)
    hygief_ratio = safe_div(hyg_close, ief_close, 0.83)
    dxy_trend = ta.ema(dxy_val, 10) > ta.ema(dxy_val, 30) ? 1.0 : -1.0
    us10y_trend = ta.ema(us10y_val, 10) > ta.ema(us10y_val, 30) ? 1.0 : -1.0
    hygief_sig = hygief_ratio > ta.ema(hygief_ratio, 20) ? 1.0 : -1.0
    vix_w * (vix_val / 20.0) + dxy_w * dxy_trend + us10y_w * us10y_trend + hygief_w * hygief_sig

macro_score = use_realtime_macro ? fetch_macro_live() : epsilon_final * calc_proxy_macro_signal()

calc_trend_score() =>
    ema_above = ema1 > ema2 ? 1.0 : 0.0
    rsi_norm = rsi / 100.0
    vol_norm = math.min(vol_mult / 3.0, 1.0)
    vcp_norm = 1.0 - vcp_ratio
    raw = (alpha * ema_above + beta * rsi_norm + gamma * vol_norm + delta * vcp_norm) * 100.0
    clamp(raw, 0.0, 100.0)

calc_prob(ts, macro_sig) =>
    raw = (ts / 100.0 + epsilon_final * macro_sig) / (1.0 + epsilon_final)
    clamp(raw, 0.0, 1.0)

trend_score = calc_trend_score()
prob = calc_prob(trend_score, macro_score)
trend_score_smooth = fast_mode ? trend_score : ta.sma(trend_score, hysteresis_len_final)
prob_smooth = fast_mode ? prob : ta.sma(prob, hysteresis_len_final)

var string stage = "중립"
var int last_signal_bar = 0
var string last_signal = ""
var float last_entry_price = na

bars_since_signal = bar_index - last_signal_bar
cooldown_passed = fast_mode ? true : (bars_since_signal >= cooldown_bars_final)

if barstate.isconfirmed
    if cooldown_passed
        if trend_score_smooth >= 70 and prob_smooth >= 0.60 and rsi > rsi_buy_th and vol_mult > vol_mult_buy
            stage := "강한 매수"
            last_signal := "BUY"
            last_signal_bar := bar_index
            last_entry_price := close
        else if trend_score_smooth <= 30 and prob_smooth <= 0.40 and rsi < rsi_sell_th and vol_mult > vol_mult_sell
            stage := "강한 매도"
            last_signal := "SELL"
            last_signal_bar := bar_index
            last_entry_price := close
        else if trend_score_smooth > 55 and prob_smooth > 0.55
            stage := "상승 관찰"
        else if trend_score_smooth < 45 and prob_smooth < 0.45
            stage := "하락 관찰"
        else
            stage := "중립"

var label fast_badge = na
if barstate.islast and fast_mode
    label.delete(fast_badge)
    fast_badge := label.new(bar_index - 20, high * 1.02, "⚡ FAST MODE", color=color.new(color.yellow, 0), textcolor=color.black, style=label.style_label_down, size=size.small)

bgcolor_col = stage == "강한 매수" ? color.new(color.green, 70) : stage == "강한 매도" ? color.new(color.red, 70) : stage == "상승 관찰" ? color.new(color.blue, 85) : stage == "하락 관찰" ? color.new(color.orange, 85) : color.new(color.gray, 95)
bgcolor(bgcolor_col)

plot(ema1, "EMA20 (단기)", color=color.blue, linewidth=2)
plot(ema2, "EMA50 (장기)", color=color.orange, linewidth=2)

buy_sl_price = show_sltp and last_signal == "BUY" ? last_entry_price * (1 - sl_pct / 100) : na
buy_tp_price = show_sltp and last_signal == "BUY" ? last_entry_price * (1 + tp_pct / 100) : na
sell_sl_price = show_sltp and last_signal == "SELL" ? last_entry_price * (1 + sl_pct / 100) : na
sell_tp_price = show_sltp and last_signal == "SELL" ? last_entry_price * (1 - tp_pct / 100) : na

plot(buy_sl_price, "매수 손절가", color=color.new(color.red, 0), linewidth=2, style=plot.style_circles)
plot(buy_tp_price, "매수 익절가", color=color.new(color.lime, 0), linewidth=2, style=plot.style_circles)
plot(sell_sl_price, "매도 손절가", color=color.new(color.maroon, 0), linewidth=2, style=plot.style_circles)
plot(sell_tp_price, "매도 익절가", color=color.new(color.green, 0), linewidth=2, style=plot.style_circles)

show_buy = barstate.isconfirmed and last_signal == "BUY" and bar_index == last_signal_bar
plotshape(show_buy, title="매수", text="매수", location=location.belowbar, color=color.new(color.lime, 0), style=shape.labelup, textcolor=color.black, size=size.large)

show_sell = barstate.isconfirmed and last_signal == "SELL" and bar_index == last_signal_bar
plotshape(show_sell, title="매도", text="매도", location=location.abovebar, color=color.new(color.red, 0), style=shape.labeldown, textcolor=color.white, size=size.large)

panel_pos = table_position == "Top Right" ? position.top_right : table_position == "Top Left" ? position.top_left : table_position == "Bottom Right" ? position.bottom_right : position.bottom_left
text_size_label = table_size == "Large" ? size.large : table_size == "Small" ? size.small : size.normal
text_size_value = table_size == "Large" ? size.normal : table_size == "Small" ? size.tiny : size.small
text_size_stage = table_size == "Large" ? size.huge : table_size == "Small" ? size.normal : size.large

var table panel = table.new(panel_pos, 2, 9, border_width=2)
if barstate.islast
    mode_text = fast_mode ? "FAST" : "NORMAL"
    mode_color = fast_mode ? color.new(color.yellow, 0) : color.new(color.blue, 0)
    table.cell(panel, 0, 0, "Mode", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 0, mode_text, bgcolor=mode_color, text_color=color.white, text_size=text_size_value)
    
    stage_bg = stage == "강한 매수" ? color.new(color.green, 20) : stage == "강한 매도" ? color.new(color.red, 20) : stage == "상승 관찰" ? color.new(color.blue, 20) : stage == "하락 관찰" ? color.new(color.orange, 20) : color.new(color.gray, 20)
    table.cell(panel, 0, 1, "시장상태", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 1, stage, bgcolor=stage_bg, text_color=color.white, text_size=text_size_stage)
    
    table.cell(panel, 0, 2, "TScore", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 2, str.tostring(trend_score_smooth, "#.0"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    table.cell(panel, 0, 3, "Prob", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 3, str.tostring(prob_smooth, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    table.cell(panel, 0, 4, "RSI", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 4, str.tostring(rsi, "#.0"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    table.cell(panel, 0, 5, "거래량", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 5, str.tostring(vol_mult, "#.#"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    table.cell(panel, 0, 6, "VCP", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 6, str.tostring(vcp_ratio, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    table.cell(panel, 0, 7, "ATH거리", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 7, str.tostring(dist_ath * 100, "#.#") + "%", bgcolor=color.new(color.gray, 80), text_color=color.white, text_size=text_size_value)
    
    macro_text = use_realtime_macro ? "실시간" : "프록시"
    macro_color = use_realtime_macro ? color.new(color.green, 20) : color.new(color.gray, 20)
    table.cell(panel, 0, 8, "매크로", bgcolor=color.new(color.gray, 20), text_color=color.white, text_size=text_size_label)
    table.cell(panel, 1, 8, macro_text, bgcolor=macro_color, text_color=color.white, text_size=text_size_value)

if barstate.isconfirmed and enable_webhook and (last_signal == "BUY" or last_signal == "SELL") and bar_index == last_signal_bar
    json_p1 = '{"ts_unix":' + str.tostring(time, "#") + ',"symbol":"' + syminfo.ticker + '","timeframe":"' + timeframe.period + '"'
    json_p2 = ',"action":"' + last_signal + '","price":' + str.tostring(close, "#.##")
    json_p3 = ',"trend_score":' + str.tostring(trend_score_smooth, "#.##") + ',"prob":' + str.tostring(prob_smooth, "#.####")
    json_p4 = ',"rsi":' + str.tostring(rsi, "#.##") + ',"vol_mult":' + str.tostring(vol_mult, "#.##")
    json_p5 = ',"vcp_ratio":' + str.tostring(vcp_ratio, "#.####") + ',"dist_ath":' + str.tostring(dist_ath, "#.####")
    json_p6 = ',"ema1":' + str.tostring(ema1, "#.##") + ',"ema2":' + str.tostring(ema2, "#.##")
    json_p7 = ',"bar_state":"close","fast_mode":' + str.tostring(fast_mode) + ',"realtime_macro":' + str.tostring(use_realtime_macro)
    json_p8 = ',"version":"vmsi_sdm_v2.1"}'
    alert_msg = json_p1 + json_p2 + json_p3 + json_p4 + json_p5 + json_p6 + json_p7 + json_p8
    alert(alert_msg, alert.freq_once_per_bar_close)
