//@version=6
indicator("VMSI-SDM v5 Final", overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500)

// ═══════════════════════════════════════════════════════════
// 📌 v5 Final - Predictive Screener + Relaxed Conditions
// 
// Key Changes:
// 1. Predictive mode: barstate.islast (not confirmed)
// 2. English labels: Buy/Sell
// 3. Relaxed conditions: more signals visible
// 4. Sell signals: removed EMA requirement
// 5. Purpose: Screener for prediction, not execution
// ═══════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════
// PARAMETERS
// ═══════════════════════════════════════════════════════════

var g_basic = "Basic Settings"
ema1_len = input.int(20, "EMA1 Period", group=g_basic)
ema2_len = input.int(50, "EMA2 Period", group=g_basic)
rsi_len = input.int(14, "RSI Period", group=g_basic)
vcp_len = input.int(20, "VCP Period", group=g_basic)
atr_len = input.int(14, "ATR Period", group=g_basic)

var g_signal = "Signal Conditions (Relaxed)"
// 매수 조건 (완화)
trend_score_buy = input.float(50, "Trend Score Buy", minval=40, maxval=70, step=2, group=g_signal, tooltip="Lower = more signals")
rsi_buy_min = input.float(45, "RSI Min (Buy)", minval=30, maxval=60, step=2, group=g_signal)
vol_mult_buy = input.float(1.0, "Vol Mult Buy", minval=0.5, maxval=2, step=0.1, group=g_signal)

// 매도 조건 (대폭 완화)
trend_score_sell = input.float(50, "Trend Score Sell", minval=30, maxval=60, step=2, group=g_signal, tooltip="Higher = more signals")
rsi_sell_max = input.float(55, "RSI Max (Sell)", minval=40, maxval=70, step=2, group=g_signal)
vol_mult_sell = input.float(1.0, "Vol Mult Sell", minval=0.5, maxval=2, step=0.1, group=g_signal)

// EMA 조건 사용 여부
use_ema_filter = input.bool(false, "Use EMA Filter", group=g_signal, tooltip="OFF = more signals (recommended)")

var g_weights = "Weights"
alpha = input.float(0.8, "Alpha (EMA)", step=0.05, group=g_weights)
beta = input.float(0.35, "Beta (RSI)", step=0.05, group=g_weights)
gamma = input.float(0.7, "Gamma (Volume)", step=0.05, group=g_weights)
delta = input.float(0.6, "Delta (VCP)", step=0.05, group=g_weights)

var g_sltp = "SL/TP Settings"
use_atr_based = input.bool(true, "Use ATR-based SL/TP", group=g_sltp)
atr_sl_mult = input.float(1.5, "ATR SL Multiplier", step=0.1, minval=0.5, maxval=5, group=g_sltp)
atr_tp_mult = input.float(2.5, "ATR TP Multiplier", step=0.1, minval=1, maxval=10, group=g_sltp)
fixed_sl_pct = input.float(5.0, "Fixed SL %", step=0.5, minval=1, maxval=20, group=g_sltp)
fixed_tp_pct = input.float(10.0, "Fixed TP %", step=0.5, minval=2, maxval=50, group=g_sltp)
show_sltp_lines = input.bool(true, "Show SL/TP Lines", group=g_sltp)
sltp_extend_bars = input.int(20, "SL/TP Line Extension", minval=5, maxval=100, group=g_sltp)

var g_display = "Display Options"
show_buy_signals = input.bool(true, "Show Buy Signals", group=g_display)
show_sell_signals = input.bool(true, "Show Sell Signals", group=g_display)
show_signal_numbers = input.bool(true, "Show Signal Numbers", group=g_display)
label_size_option = input.string("Small", "Label Size", options=["Tiny", "Small", "Normal"], group=g_display)

var g_webhook = "Webhook"
enable_webhook = input.bool(true, "Enable Webhook", group=g_webhook)

// ═══════════════════════════════════════════════════════════
// UTILS
// ═══════════════════════════════════════════════════════════

clamp(x, lo, hi) => math.max(lo, math.min(hi, x))
safe_div(a, b, fallback) => nz(b > 0 ? a / b : fallback, fallback)

// ═══════════════════════════════════════════════════════════
// INDICATORS
// ═══════════════════════════════════════════════════════════

ema1 = ta.ema(close, ema1_len)
ema2 = ta.ema(close, ema2_len)
rsi = ta.rsi(close, rsi_len)
vol_avg = ta.sma(volume, 20)
vol_mult = safe_div(volume, vol_avg, 1.0)
vcp_high = ta.highest(high, vcp_len)
vcp_low = ta.lowest(low, vcp_len)
vcp_ratio = safe_div(vcp_high - vcp_low, vcp_high, 0.5)
atr_val = ta.atr(atr_len)

// ═════════════════════════════════════════════════════════
// TREND SCORE
// ═══════════════════════════════════════════════════════════

calc_trend_score() =>
    ema_above = ema1 > ema2 ? 1.0 : 0.0
    rsi_norm = rsi / 100.0
    vol_norm = math.min(vol_mult / 3.0, 1.0)
    vcp_norm = 1.0 - vcp_ratio
    raw = (alpha * ema_above + beta * rsi_norm + gamma * vol_norm + delta * vcp_norm) * 100.0
    clamp(raw, 0.0, 100.0)

trend_score = calc_trend_score()

// ═══════════════════════════════════════════════════════════
// DYNAMIC SL/TP
// ═══════════════════════════════════════════════════════════

calc_dynamic_sl_tp(signal_type) =>
    var float sl_distance = 0.0
    var float tp_distance = 0.0
    
    if use_atr_based
        base_sl = atr_val * atr_sl_mult
        base_tp = atr_val * atr_tp_mult
        vcp_adjustment = 1.0 + (vcp_ratio * 0.5)
        sl_distance := base_sl * vcp_adjustment
        tp_distance := base_tp * vcp_adjustment
    else
        sl_distance := close * (fixed_sl_pct / 100.0)
        tp_distance := close * (fixed_tp_pct / 100.0)
    
    if trend_score >= 70 or trend_score <= 30
        tp_distance := tp_distance * 1.2
    
    [sl_distance, tp_distance]

// ═══════════════════════════════════════════════════════════
// SIGNAL LOGIC (PREDICTIVE + RELAXED)
// ═══════════════════════════════════════════════════════════

// 매수 신호 (완화 + EMA 선택적)
buy_condition_base = trend_score >= trend_score_buy and rsi > rsi_buy_min and vol_mult > vol_mult_buy
buy_condition_ema = use_ema_filter ? ema1 > ema2 : true
buy_signal = barstate.islast and buy_condition_base and buy_condition_ema

// 매도 신호 (대폭 완화 + EMA 제거 가능)
sell_condition_base = trend_score <= trend_score_sell and rsi < rsi_sell_max and vol_mult > vol_mult_sell
sell_condition_ema = use_ema_filter ? ema1 < ema2 : true
sell_signal = barstate.islast and sell_condition_base and sell_condition_ema

// ═══════════════════════════════════════════════════════════
// SIGNAL TRACKING
// ═══════════════════════════════════════════════════════════

var int buy_counter = 0
var int sell_counter = 0
var int total_signals = 0

if buy_signal
    buy_counter := buy_counter + 1
    total_signals := total_signals + 1
    
if sell_signal
    sell_counter := sell_counter + 1
    total_signals := total_signals + 1

// ═══════════════════════════════════════════════════════════
// VISUALIZATION
// ═══════════════════════════════════════════════════════════

plot(ema1, "EMA1", color=color.new(color.blue, 0), linewidth=2)
plot(ema2, "EMA2", color=color.new(color.orange, 0), linewidth=2)

label_size = label_size_option == "Tiny" ? size.tiny : label_size_option == "Small" ? size.small : size.normal

// 매수 신호 표시
if show_buy_signals and buy_signal
    [sl_dist, tp_dist] = calc_dynamic_sl_tp("BUY")
    
    entry_price = close
    sl_price = entry_price - sl_dist
    tp_price = entry_price + tp_dist
    
    sl_pct = (sl_dist / entry_price) * 100
    tp_pct = (tp_dist / entry_price) * 100
    
    // 라벨 텍스트 (영문)
    label_text = show_signal_numbers ? "B#" + str.tostring(buy_counter) : "Buy"
    tooltip_text = "Buy Signal #" + str.tostring(buy_counter) + "\n" +
                   "Price: " + str.tostring(entry_price, "#.##") + "\n" +
                   "SL: " + str.tostring(sl_price, "#.##") + " (-" + str.tostring(sl_pct, "#.#") + "%)\n" +
                   "TP: " + str.tostring(tp_price, "#.##") + " (+" + str.tostring(tp_pct, "#.#") + "%)\n" +
                   "RSI: " + str.tostring(rsi, "#.#") + " | Vol: " + str.tostring(vol_mult, "#.#") + "x\n" +
                   "Trend: " + str.tostring(trend_score, "#.#") + "\n" +
                   "[PREDICTIVE - Not Confirmed]"
    
    label.new(bar_index, low, label_text, 
              style=label.style_label_up, 
              color=color.new(color.green, 0), 
              textcolor=color.white, 
              size=label_size,
              tooltip=tooltip_text)
    
    // SL/TP 라인
    if show_sltp_lines
        line.new(bar_index, entry_price, bar_index + sltp_extend_bars, entry_price, 
                 color=color.new(color.blue, 50), width=1, style=line.style_solid)
        
        line.new(bar_index, sl_price, bar_index + sltp_extend_bars, sl_price, 
                 color=color.new(color.red, 0), width=1, style=line.style_dashed)
        
        line.new(bar_index, tp_price, bar_index + sltp_extend_bars, tp_price, 
                 color=color.new(color.lime, 0), width=1, style=line.style_dashed)
        
        if show_signal_numbers
            label.new(bar_index + int(sltp_extend_bars/2), sl_price, "#" + str.tostring(buy_counter) + " SL", 
                      style=label.style_label_left, color=color.new(color.red, 30), 
                      textcolor=color.white, size=size.tiny)
            label.new(bar_index + int(sltp_extend_bars/2), tp_price, "#" + str.tostring(buy_counter) + " TP", 
                      style=label.style_label_left, color=color.new(color.lime, 30), 
                      textcolor=color.black, size=size.tiny)

// 매도 신호 표시
if show_sell_signals and sell_signal
    [sl_dist, tp_dist] = calc_dynamic_sl_tp("SELL")
    
    entry_price = close
    sl_price = entry_price + sl_dist
    tp_price = entry_price - tp_dist
    
    sl_pct = (sl_dist / entry_price) * 100
    tp_pct = (tp_dist / entry_price) * 100
    
    // 라벨 텍스트 (영문)
    label_text = show_signal_numbers ? "S#" + str.tostring(sell_counter) : "Sell"
    tooltip_text = "Sell Signal #" + str.tostring(sell_counter) + "\n" +
                   "Price: " + str.tostring(entry_price, "#.##") + "\n" +
                   "SL: " + str.tostring(sl_price, "#.##") + " (+" + str.tostring(sl_pct, "#.#") + "%)\n" +
                   "TP: " + str.tostring(tp_price, "#.##") + " (-" + str.tostring(tp_pct, "#.#") + "%)\n" +
                   "RSI: " + str.tostring(rsi, "#.#") + " | Vol: " + str.tostring(vol_mult, "#.#") + "x\n" +
                   "Trend: " + str.tostring(trend_score, "#.#") + "\n" +
                   "[PREDICTIVE - Not Confirmed]"
    
    label.new(bar_index, high, label_text, 
              style=label.style_label_down, 
              color=color.new(color.red, 0), 
              textcolor=color.white, 
              size=label_size,
              tooltip=tooltip_text)
    
    // 매도는 인버스용이므로 SL/TP 라인 표시 안 함 (옵션)

// ═══════════════════════════════════════════════════════════
// INFO PANEL (REAL-TIME)
// ═══════════════════════════════════════════════════════════

var table panel = table.new(position.top_right, 2, 9, border_width=1)
if true
    table.cell(panel, 0, 0, "Price", bgcolor=color.new(color.gray, 20), text_color=color.white)
    table.cell(panel, 1, 0, str.tostring(close, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white)
    
    table.cell(panel, 0, 1, "Trend", bgcolor=color.new(color.gray, 20), text_color=color.white)
    ts_color = trend_score >= 60 ? color.new(color.green, 20) : (trend_score <= 40 ? color.new(color.red, 20) : color.new(color.gray, 80))
    table.cell(panel, 1, 1, str.tostring(trend_score, "#.0"), bgcolor=ts_color, text_color=color.white)
    
    table.cell(panel, 0, 2, "RSI", bgcolor=color.new(color.gray, 20), text_color=color.white)
    rsi_color = rsi > 60 ? color.new(color.green, 20) : (rsi < 40 ? color.new(color.red, 20) : color.new(color.gray, 80))
    table.cell(panel, 1, 2, str.tostring(rsi, "#.0"), bgcolor=rsi_color, text_color=color.white)
    
    table.cell(panel, 0, 3, "Volume", bgcolor=color.new(color.gray, 20), text_color=color.white)
    vol_color = vol_mult > 2 ? color.new(color.orange, 20) : color.new(color.gray, 80)
    table.cell(panel, 1, 3, str.tostring(vol_mult, "#.#") + "x", bgcolor=vol_color, text_color=color.white)
    
    table.cell(panel, 0, 4, "EMA", bgcolor=color.new(color.gray, 20), text_color=color.white)
    ema_status = ema1 > ema2 ? "Bull" : "Bear"
    ema_color = ema1 > ema2 ? color.new(color.green, 20) : color.new(color.red, 20)
    table.cell(panel, 1, 4, ema_status, bgcolor=ema_color, text_color=color.white)
    
    table.cell(panel, 0, 5, "ATR", bgcolor=color.new(color.gray, 20), text_color=color.white)
    table.cell(panel, 1, 5, str.tostring(atr_val, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.white)
    
    table.cell(panel, 0, 6, "Buy", bgcolor=color.new(color.gray, 20), text_color=color.white)
    table.cell(panel, 1, 6, str.tostring(buy_counter), bgcolor=color.new(color.green, 20), text_color=color.white)
    
    table.cell(panel, 0, 7, "Sell", bgcolor=color.new(color.gray, 20), text_color=color.white)
    table.cell(panel, 1, 7, str.tostring(sell_counter), bgcolor=color.new(color.red, 20), text_color=color.white)
    
    table.cell(panel, 0, 8, "Mode", bgcolor=color.new(color.gray, 20), text_color=color.white)
    table.cell(panel, 1, 8, "PREDICT", bgcolor=color.new(color.purple, 20), text_color=color.white)

// ═══════════════════════════════════════════════════════════
// WEBHOOK ALERT
// ═══════════════════════════════════════════════════════════

if enable_webhook and buy_signal
    [sl_dist, tp_dist] = calc_dynamic_sl_tp("BUY")
    sl_price = close - sl_dist
    tp_price = close + tp_dist
    
    json_p1 = '{"ts_unix":' + str.tostring(time, "#") + ',"symbol":"' + syminfo.ticker + '","timeframe":"' + timeframe.period + '"'
    json_p2 = ',"action":"BUY","price":' + str.tostring(close, "#.##") + ',"signal_number":' + str.tostring(buy_counter)
    json_p3 = ',"trend_score":' + str.tostring(trend_score, "#.##")
    json_p4 = ',"rsi":' + str.tostring(rsi, "#.##") + ',"vol_mult":' + str.tostring(vol_mult, "#.##")
    json_p5 = ',"ema1":' + str.tostring(ema1, "#.##") + ',"ema2":' + str.tostring(ema2, "#.##")
    json_p6 = ',"sl_price":' + str.tostring(sl_price, "#.##") + ',"tp_price":' + str.tostring(tp_price, "#.##")
    json_p7 = ',"atr":' + str.tostring(atr_val, "#.##") + ',"vcp_ratio":' + str.tostring(vcp_ratio, "#.####")
    json_p8 = ',"mode":"predictive","version":"vmsi_sdm_v5_final"}'
    alert_msg = json_p1 + json_p2 + json_p3 + json_p4 + json_p5 + json_p6 + json_p7 + json_p8
    alert(alert_msg, alert.freq_all)

if enable_webhook and sell_signal
    [sl_dist, tp_dist] = calc_dynamic_sl_tp("SELL")
    sl_price = close + sl_dist
    tp_price = close - tp_dist
    
    json_p1 = '{"ts_unix":' + str.tostring(time, "#") + ',"symbol":"' + syminfo.ticker + ',"timeframe":"' + timeframe.period + '"'
    json_p2 = ',"action":"SELL","price":' + str.tostring(close, "#.##") + ',"signal_number":' + str.tostring(sell_counter)
    json_p3 = ',"trend_score":' + str.tostring(trend_score, "#.##")
    json_p4 = ',"rsi":' + str.tostring(rsi, "#.##") + ',"vol_mult":' + str.tostring(vol_mult, "#.##")
    json_p5 = ',"ema1":' + str.tostring(ema1, "#.##") + ',"ema2":' + str.tostring(ema2, "#.##")
    json_p6 = ',"sl_price":' + str.tostring(sl_price, "#.##") + ',"tp_price":' + str.tostring(tp_price, "#.##")
    json_p7 = ',"atr":' + str.tostring(atr_val, "#.##") + ',"vcp_ratio":' + str.tostring(vcp_ratio, "#.####")
    json_p8 = ',"mode":"predictive","version":"vmsi_sdm_v5_final"}'
    alert_msg = json_p1 + json_p2 + json_p3 + json_p4 + json_p5 + json_p6 + json_p7 + json_p8
    alert(alert_msg, alert.freq_all)

